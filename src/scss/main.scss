// @import "../../node_modules/bootstrap/scss/bootstrap.scss";

$items-count: 360; // corresponds to the number of divs in your HTML

// Define animation
@keyframes move {
  0% {
    transform: scaleY(0);
  }

  100% {
    transform: scaleY(1.4);
    opacity: 0;
  }
}

@keyframes move-child {
  0% {
    transform: translateY(0%);
  }

  100% {
    transform: translateY(30%);
    opacity: 0;
  }
}
// Mixin to use animation
@mixin add-move-animation($duration, $delay) {
  animation-name: move;
  animation-duration: $duration;
  animation-delay: $delay;
  animation-iteration-count: infinite;
  animation-direction: normal;
  animation-timing-function: cubic-bezier(1, 0.1, 0.795, 0.5);
  //   animation-play-state: paused;
}

body {
  background-color: darkslategray;
  margin: 0;
}

.items-container {
  display: grid;
  grid-template-columns: repeat($items-count, 1fr);
  grid-template-rows: 1fr;
  height: 100vh;
  width: 100vw;
}
.item {
  border-radius: 2rem;
  border: whitesmoke 1px solid;
  &::after {
    content: "";
    width: 100%;
    position: absolute;
    background-color: pink;
    opacity: 0.5;
    z-index: -1;
    // border: 2px red solid;
    transform: translateY(40%);
  }
}
// the ::after is experimental, will come back to it later

// For loop to randomize values for each div bar
@for $i from 1 through $items-count {
  .item:nth-child(#{random($items-count)}),
  .items:nth-child(#{random($items-count)})::after {
    background: transparent;
    border: none;
  }
  .item:nth-child(#{$i}) {
    background: whitesmoke;
    height: random(100) + vh;
    transform-origin: 0 0;
    @include add-move-animation(random(2) + 2 + s, random(3) - 1 + s);
    &::after {
      height: random(4) + rem;
      animation-name: move-child;
      animation-duration: random(2) + 2 + s;
      animation-delay: random(3) - 1 + s;
      animation-iteration-count: infinite;
      animation-direction: normal;
      animation-timing-function: cubic-bezier(0, 0.1, 0.795, 0.5);
    }
  }
}
// to add a little bit of visual space
.item:nth-child(even) {
  background: transparent;
  border: none;
  &::after {
    background: transparent;
    border: none;
  }
}
// to add a little bit more randomness
.item:nth-child(3n) {
  background: transparent;
  &::after {
    background: transparent;
  }
}
